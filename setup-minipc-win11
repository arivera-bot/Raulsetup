<# setup-mini-pc.ps1
   Run as Administrator.
   - Prompts for computer name (optional)
   - Adds Defender exclusion for the folder it runs from
   - Installs Chrome (if missing)
   - Installs Chrome Remote Desktop Host (MSI)
   - Installs Machine Expert Basic (ZIP -> installer)
   - Sets display scale to 125%, disables sleep/hibernate, trims background noise
   - Launches Chrome to https://remotedesktop.google.com/access for interactive activation
   - Optionally removes Defender exclusion at the end (uncomment cleanup)
#>

# ===== CONFIG - edit these before publishing =====
$URL_CRD_MSI = "https://raw.githubusercontent.com/YOURORG/YOURREPO/main/installers/chromeremotedesktophost.msi"
$URL_MEB_ZIP = "https://raw.githubusercontent.com/YOURORG/YOURREPO/main/installers/MachineExpertBasic_V1.2_SP1.zip"
# ==================================================

$ErrorActionPreference = 'Stop'

# --- Admin guard ---
$principal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "Please run this script as Administrator." -ForegroundColor Yellow
    exit 1
}

# --- Helpers & logging ---
$Here = Split-Path -Parent $MyInvocation.MyCommand.Path
$Log  = Join-Path $Here "setup-mini-pc.log"
"=== Run: $(Get-Date) on $env:COMPUTERNAME ===" | Out-File $Log -Append -Encoding utf8

function Log($m){ $m | Out-File $Log -Append }
function Try-Run($scriptBlock, $desc) {
  try { & $scriptBlock; Log "OK: $desc" }
  catch { Log "ERR: $desc :: $($_.Exception.Message)"; Write-Warning "Failed: $desc -> $($_.Exception.Message)" }
}

# --- Defender exclusion for provisioning folder & powershell process ---
$ProvisionDir = $Here
Try-Run {
  # Add exclusions to avoid false-positive blocking during provisioning
  Add-MpPreference -ExclusionPath $ProvisionDir -ErrorAction SilentlyContinue
  Add-MpPreference -ExclusionProcess "powershell.exe" -ErrorAction SilentlyContinue
  Write-Host "Added Defender exclusions for $ProvisionDir and powershell.exe" -ForegroundColor Cyan
} "Defender exclusions (provision folder + PowerShell)"

# --- Prompt for desired computer name (optional) ---
$DesiredComputerName = Read-Host "Enter computer name (leave blank to keep current: $env:COMPUTERNAME)"
if ($DesiredComputerName -and $DesiredComputerName -ne $env:COMPUTERNAME) {
  Try-Run { Rename-Computer -NewName $DesiredComputerName -Force } "Rename computer to '$DesiredComputerName' (reboot required)"
}

# --- Chrome detection function ---
function Test-ChromeInstalled {
  $candidates = @("$env:ProgramFiles\Google\Chrome\Application\chrome.exe",
                  "$env:ProgramFiles(x86)\Google\Chrome\Application\chrome.exe")
  if ($candidates | Where-Object { Test-Path $_ }) { return $true }
  $keys = @("HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall")
  foreach($k in $keys) {
    $hit = Get-ChildItem $k -ErrorAction SilentlyContinue | ForEach-Object {
      try { Get-ItemProperty $_.PSPath } catch { $null }
    } | Where-Object { $_.DisplayName -like "Google Chrome*" }
    if ($hit) { return $true }
  }
  return $false
}

# --- Download helper (prefer local copy, otherwise download from URL) ---
function Get-Or-Download {
  param([string]$LocalName, [string]$Url)
  $local = Join-Path $Here $LocalName
  if (Test-Path $local) { return $local }
  $dest = Join-Path $env:TEMP $LocalName
  Invoke-WebRequest -UseBasicParsing -Uri $Url -OutFile $dest
  return $dest
}

# --- Install Chrome if missing ---
if (Test-ChromeInstalled) {
  Write-Host "Chrome present â€” skipping install." -ForegroundColor Cyan
  Log "Skip: Chrome already installed"
} else {
  Try-Run {
    if (Get-Command winget -ErrorAction SilentlyContinue) {
      winget install --id Google.Chrome --silent --accept-source-agreements --accept-package-agreements | Out-Null
    } else { throw "winget not found; install Chrome manually or provide MSI locally." }
  } "Install Google Chrome"
}

# --- Best-effort: make Chrome default (won't be fully silent on Win11) ---
$DefaultAppXml = Join-Path $Here "DefaultAppAssociations.xml"
if (Test-Path $DefaultAppXml) {
  Try-Run { Dism /Online /Import-DefaultAppAssociations:$DefaultAppXml | Out-Null } "Import Default App Associations XML (affects new users)"
} else {
  Try-Run { Start-Process "ms-settings:defaultapps?apiname=Microsoft.Chrome"; Start-Sleep 20 } "Open Settings for 'Make default' (click manually)"
}

# --- Install Chrome Remote Desktop Host (MSI) ---
Try-Run {
  $crdMsi = Get-Or-Download -LocalName "chromeremotedesktophost.msi" -Url $URL_CRD_MSI
  Start-Process msiexec.exe -ArgumentList "/i `"$crdMsi`" /qn /norestart" -Wait
} "Install Chrome Remote Desktop Host"

# --- Enable .NET 3.5 (if needed by installers) ---
Try-Run { DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /Quiet /NoRestart | Out-Null } ".NET Framework 3.5"

# --- Install Machine Expert Basic (ZIP -> silent install best-effort) ---
Try-Run {
  $mebZip = Get-Or-Download -LocalName "MachineExpertBasic_V1.2_SP1.zip" -Url $URL_MEB_ZIP
  $dst = Join-Path $Here "MachineExpertBasic_Extracted"
  if (Test-Path $dst) { Remove-Item $dst -Recurse -Force }
  Expand-Archive -Path $mebZip -DestinationPath $dst -Force
  $msi = Get-ChildItem $dst -Recurse -Filter *.msi -ErrorAction SilentlyContinue | Select-Object -First 1
  $exe = Get-ChildItem $dst -Recurse -Filter *.exe -ErrorAction SilentlyContinue | Where-Object { $_.Name -match 'setup|install|machine|expert' } | Select-Object -First 1
  if ($msi) {
    Start-Process msiexec.exe -ArgumentList "/i `"$($msi.FullName)`" /qn /norestart" -Wait
  } elseif ($exe) {
    foreach ($sw in @('/S','/silent','/verysilent','/qn','/s')) {
      try { Start-Process $exe.FullName -ArgumentList $sw -Wait -NoNewWindow; break } catch {}
    }
  } else { throw "No installer found inside ZIP." }
} "Install Machine Expert Basic"

# --- Set display scale to 125% (DPI=120) for current user (sign-out/reboot required to fully apply) ---
Try-Run {
  New-Item -Path "HKCU:\Control Panel\Desktop" -Force | Out-Null
  Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "LogPixels" -Type DWord -Value 120
  Set-ItemProperty "HKCU:\Control Panel\Desktop" -Name "Win8DpiScaling" -Type DWord -Value 1
} "Set display scale to 125%"

# --- Keep system awake / disable hibernate / no screen off on AC ---
Try-Run {
  powercfg /HIBERNATE OFF
  powercfg -Change -standby-timeout-ac 0
  powercfg -Change -monitor-timeout-ac 0
  powercfg -Change -disk-timeout-ac 0
  powercfg /SETACVALUEINDEX SCHEME_CURRENT SUB_VIDEO ADAPTBRIGHT 0
  powercfg /SETACVALUEINDEX SCHEME_CURRENT SUB_SLEEP HYBRIDSLEEP 0
  powercfg /SETACVALUEINDEX SCHEME_CURRENT SUB_SLEEP STANDBYIDLE 0
  powercfg -SetActive SCHEME_CURRENT
} "Keep system awake (AC)"

# --- Reduce background noise (safe policies) ---
Try-Run {
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "NoAutoUpdate" -Type DWord -Value 1
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Type DWord -Value 2
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\CloudContent" -Name "DisableWindowsConsumerFeatures" -Type DWord -Value 1
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Explorer" -Name "DisableSearchBoxSuggestions" -Type DWord -Value 1
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Dsh" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Dsh" -Name "AllowNewsAndInterests" -Type DWord -Value 0
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppPrivacy" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\AppPrivacy" -Name "LetAppsRunInBackground" -Type DWord -Value 2
  Try { Stop-Service WSearch -Force } Catch {}
  Set-Service WSearch -StartupType Disabled
  New-Item "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive" -Force | Out-Null
  Set-ItemProperty "HKLM:\SOFTWARE\Policies\Microsoft\Windows\OneDrive" -Name "DisableFileSync" -Type DWord -Value 1
} "Reduce background activity"

# --- Firewall rules for CRD (if present) ---
Try-Run {
  $hostExe = "$env:ProgramFiles\Google\Chrome Remote Desktop\CurrentVersion\remoting_host.exe"
  if (Test-Path $hostExe) {
    New-NetFirewallRule -DisplayName "Chrome Remote Desktop Inbound" -Direction Inbound -Program $hostExe -Action Allow -Protocol TCP -Profile Any -ErrorAction SilentlyContinue | Out-Null
    New-NetFirewallRule -DisplayName "Chrome Remote Desktop Outbound" -Direction Outbound -Program $hostExe -Action Allow -Protocol TCP -Profile Any -ErrorAction SilentlyContinue | Out-Null
  }
} "Firewall rules for CRD"

# --- Launch CRD activation page (interactive 'Turn on' - sign into Chrome as service@thetrivialcompany.com) ---
Write-Host "`nOpening Chrome to Chrome Remote Desktop. Sign into Chrome as service@thetrivialcompany.com, click 'Turn on', confirm name and enter PIN (e.g. 748447)." -ForegroundColor Green
Try-Run { Start-Process "chrome.exe" "https://remotedesktop.google.com/access" } "Open CRD activation page"

Write-Host "`nAll steps attempted. If you renamed the PC or changed DPI, reboot to finalize." -ForegroundColor Green
Log "Done: $(Get-Date)"

# --- OPTIONAL cleanup: remove Defender exclusions (uncomment to enable) ---
 Try-Run {
   Remove-MpPreference -ExclusionPath $ProvisionDir -ErrorAction SilentlyContinue
   Remove-MpPreference -ExclusionProcess "powershell.exe" -ErrorAction SilentlyContinue
   Write-Host "Removed Defender exclusions." -ForegroundColor Green
 } "Cleanup Defender exclusions"
